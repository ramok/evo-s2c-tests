#!/bin/sh
# 
# Copyright (c) 2021 komar@evologics.de, EvoLogics GmbH, MIT
#
# vim: ft=tcl
# the next line restarts using expect \
    LC_TYPE=C exec expect -f "$0" -- "$@"

#FIXME: set ::opt(no-evins) 1
#check-cmds {
#{ {AT%VERSION} {OK\r\n%VERSION,(.+?)} ::ver_evins }
#}
array set ::opt {
    source-level    3
    evins-ver-min   0.8
    send-period     -1
    test-duration   3600
    loop-mode       1
    loglevel        {err warn note info norm detail todo pass stage ask}
    log-dir         log
    not-interactive 0

    check-cmds {
        { {ATI1}       {(phy: .+?)}           ::ver_fw    }
    }

    init-cmds {
        { {AT?AL}      {(\d+)}       ::sid2laddr }
        { {AT@CTRL}                              }
        { {AT!L$::opt(source-level)}             } 
        { {AT@ZX1}                               }
    }
}
set ::opt(progname) [file tail $argv0]
set ::opt(prog_dir) [file dirname [file normalize $argv0]]

array set test_period {
    ims       3
    sync      300
    pcsync    300
}

remove_nulls -d 0
remove_nulls 0
log_user 0

# NOTE: problems with binary data in stdin/stdout
#   * fconfigure help only for stdin (?)
#   * >>>>> 'send_*' and 'interact' corrupt binary data, use puts -nonewline <<<<<
#     - send -raw(?)
#
fconfigure stdin  -translation binary -buffering none
fconfigure stdout -translation binary -buffering none

# need to prevent internal encoding conversion
encoding system iso8859-1

#stty raw -echo

match_max 2000
set timeout -1

foreach lib [glob -nocomplain $::opt(prog_dir)/lib/*.tcl] {
    source $lib
}

############## start: tests ######################
namespace eval ::test {
}

foreach test [glob -nocomplain $::opt(prog_dir)/tests/*.tcl] {
    source $test
}

proc usage {{err {}}} {
    global argv0
    send_user "Scenario test framework for EvoLogics S2C acoustic modems.\n\n\
    Usage: $::opt(progname) \[flags] \[--] <test-names> <IP\[:port]>...\n\
    \n\
    -s  - source level (from 0 to 3)\n\
    -p  - period of sending IMS/%SYNC (default:\
        [join [lmap k [array name ::test_period] {set k "'$k': [sec2human $::test_period($k)]"}] {, }])\n\
    -d  - test duration time (default: [sec2human $::opt(test-duration)]). Possible add suffix 'm' and 'h' for minutes and hours\n\
    -l  - number of tests running in loop. Default tests will be repeated for each modem as master (-l 1).\n\
    -y  - answer 'yes' to all questions\n\
    \n\
    -h  - this help\n\
    -v  - verbose log\n\
    \n\
    IP\[:port]    - Modem IP and optional port. Can be in short NUM in 192.168.0.<NUM>\n\
    test-names   - Can be 'all' or comma separated test names.\n               \
    Available tests: [lmap ns [namespace children ::test *] {namespace tail $ns}]\n\
    \n\
    "
    send_user "\n"
    foreach ns [namespace children ::test *] {
        send_user "Test '[namespace tail $ns]' descrition:\n [set ${ns}::descrition]\n\n"
    }

    send_user "Usage examples:\n\
    \n\
    # Run all test with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Tests will be repeat 1 time for each modem as master, 2 times in total.\n\
    $ ./$::opt(progname) all 171 162\n\
    \n\
    # Run all test with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Tests will be repeat 1 time for each modem as master, 2 times in total.\n\
    $ ./$::opt(progname) all 171 162\n\
    \n\
    # Run tests 'ims' and 'sync' with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Tests will be repeat 2 time for each modem as master, 4 times in total.\n\
    # All interactive menu will be skipped.\n\
    $ ./$::opt(progname) -y -l 2 ims,sync 171 162\n\
    \n\
    # Run tests 'ims' for 30 min with master modems 192.168.0.171:9200 and remote 192.168.0.162:9200 \n\
    # All interactive menu will be skipped.\n\
    $ ./$::opt(progname) -y -d 30m -l 0 ims 171 162\n\
    \n"

    if {$err != {}} {
        die $err
    }
    exit 0
}

while {[llength $argv] > 0} {
    set flag [lindex $argv 0]
    if {0 == [regexp "^-" $flag]} break
    set argv [lrange $argv 1 end]
    switch -- $flag {
        -s {
            set ::opt(source-level) [lindex $argv 0]
            check_for_following digit
            if {![string is digit $::opt(source-level)] || \
                $::opt(source-level) < 0 || $::opt(source-level) > 3} {
                die "Source level must be digit from 0 to 3\n"
            }
            set argv [lrange $argv 1 end]
        }
        -p {
            set ::opt(send-period) [lindex $argv 0]
            check_for_following sec
            if {![string is digit $::opt(send-period)]} {
                die "Send period must be digit\n"
            }
            set argv [lrange $argv 1 end]
        }
        -d {
            set ::opt(test-duration) [timeunit2sec [lindex $argv 0]]
            check_for_following sec
            if {![string is digit $::opt(test-duration)]} {
                die "wrong test duration time format"
            }
            set argv [lrange $argv 1 end]
        }
        -l {
            set ::opt(loop-mode) [lindex $argv 0]
            check_for_following number
            if {![string is digit $::opt(loop-mode)]} {
                die "wrong number of tests running in loop"
            }
            set argv [lrange $argv 1 end]
        }
        -y { set ::opt(not-interactive) 1 }
        -v { lappend ::opt(loglevel) dbg }
        -h - --help { usage }
        -- { break }
        ^- { die "unknown option: \"$flag\"" }
    }
}

set argv [string trim $argv \{\}]
set argc [llength $argv]

if {$argc < 3} {
    usage
}

set tests [::test_helper::parse_name_tests [lindex $argv 0]]
set ::ips {}
foreach ip [lrange $argv 1 end] {
    set ip [canonize_ip $ip]
    lappend ::ips $ip
}

trap {
    if {[info exist ::sids]} {
        msg warn "\rInterrupt test\n"
        ::am::reset_all $::sids
    }
    ::log::main_deinit
    exit
} SIGINT

::log::main_init

msg info "Will be perform test with nodes:\n"
foreach ip $::ips {
    msg info $ip:$port($ip)\n
}
if {$::opt(loop-mode)} {
    msg note "NOTE: Every test will repeat for each node becoming master\n"
}
set sep "+--------+-----------+----------+----------+\n"
msg info $sep
msg info "|  Test  |  Duration |  Period  |  Repeat  |\n"
msg info $sep

set ::tests_run_time_start [clock second]
set ::tests_run_time_est 0
foreach test $tests {
    if {$::opt(send-period) != -1} {
        set period $::opt(send-period)
    } else {
        set period $::test_period($test)
    }

    set repeat $::opt(loop-mode)
    if {$::opt(loop-mode)} {
        set repeat [expr $::opt(loop-mode) * [llength $::ips]]
    } else {
        set repeat 1
    }

    msg info [format "| %-6s | %5s sec | %4s sec | %2s times | \n" \
        $test $::opt(test-duration) $period $repeat]
    set ::tests_run_time_est [expr $::tests_run_time_est + $::opt(test-duration) * $repeat] 
}
msg info $sep
msg info "Estimated time of running test is: [sec2human $::tests_run_time_est], "
msg info "ETA [sec2date [expr [clock second] + $::tests_run_time_est]]\n"

::am::check_modems

if {!$::opt(not-interactive) && ![ask_yes {Do you want run tests?}]} {
    exit
}

foreach test $tests {
    if {$::opt(send-period) != -1} {
        set period $::opt(send-period)
    } else {
        set period $::test_period($test)
    }

    ::test::${test}::run $::opt(test-duration) $period $::ips

    set repeat $::opt(loop-mode)
    if {$::opt(loop-mode)} {
        set repeat [expr $::opt(loop-mode) * [llength $::ips] - 1]
    }

    for {} {$repeat} {incr repeat -1} {
        sleep 2
        set ::ips [lrotate $::ips]
        ::test::${test}::run $::opt(test-duration) $period $::ips
    }
}
