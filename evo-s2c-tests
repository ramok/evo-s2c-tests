#!/bin/sh
# 
# Copyright (c) 2021 komar@evologics.de, EvoLogics GmbH, MIT
#
# vim: ft=tcl
# the next line restarts using expect \
    LC_TYPE=C exec expect -f "$0" -- "$@"

array set ::opt {
    source-level    3
    evins-ver-min   0.8
    send-period     -1
    test-duration   3600
    loop-mode       0
    loglevel        {err warn note info norm detail todo pass stage ask}
    log-dir         log
    not-interactive 0

    check-cmds {
        { {ATI1}       {(phy: .+?)}           ::ver_fw    }
        { {AT%VERSION} {OK\r\n%VERSION,(.+?)} ::ver_evins }
    }

    init-cmds {
        { {AT?AL}      {(\d+)}       ::sid2laddr }
        { {AT@CTRL}                              }
        { {AT!L$::opt(source-level)}             } 
        { {AT@ZX1}                               }
    }
}
set ::opt(progname) [file tail $argv0]

array set test_period {
    ims       3
    sync      300
    pcsync    300
}

remove_nulls -d 0
remove_nulls 0
log_user 0

# NOTE: problems with binary data in stdin/stdout
#   * fconfigure help only for stdin (?)
#   * >>>>> 'send_*' and 'interact' corrupt binary data, use puts -nonewline <<<<<
#     - send -raw(?)
#
fconfigure stdin  -translation binary -buffering none
fconfigure stdout -translation binary -buffering none

# need to prevent internal encoding conversion
encoding system iso8859-1

#stty raw -echo

match_max 2000
set timeout -1

############## start: message helpers ######################
namespace eval ::msg {
    namespace export c msg err die warn ok \
        hexdump hexdump_ascii bindump beep

    array set c {
        none  "\033\[0m"    white "\033\[1;37m"
        red   "\033\[0;31m" lred  "\033\[1;31m"
        grn   "\033\[0;32m" lgrn  "\033\[1;32m"
        yel   "\033\[0;33m" lyel  "\033\[1;33m"
        mag   "\033\[0;35m" lmag  "\033\[1;35m"
        lblue "\033\[1;36m" cyan  "\033\[0;36m"
    }

    # https://en.wikipedia.org/wiki/ANSI_escape_code
    array set esc {
        erase-line-to-end   "\033\[0K"
        erase-line-to-start "\033\[1K"
        erase-line          "\033\[2K"
    }

    variable show_prefix_state 1
    variable prefix "\[clock format \[clock seconds] -format {%d-%m-%Y %H:%M:%S}]: "
}

proc ::msg::msg {type msg {out stdout}} {
    if {[lsearch -exact $::opt(loglevel) $type] == -1} {
        return
    }
    
    switch $type {
        err     {set col $::msg::c(lred)}
        warn    {set col $::msg::c(lmag)}
        info    {set col $::msg::c(white)}
        note    {set col $::msg::c(cyan)}
        norm    {set col {}}
        todo    {set col $::msg::c(red)}
        detail  {set col $::msg::c(cyan)}
        dbg     {set col $::msg::c(mag)}
        ask     {set col $::msg::c(lyel)}
        pass    {set col $::msg::c(lgrn)}
        stage   {
            set col $::msg::c(grn)
            set msg "\r* $msg =================\n"
        }   
        default {set col {}}
    }   
    
    set prefix $::msg::c(none)[subst $::msg::prefix]$col
    regsub -all {\r} $msg \&$prefix msg
    regsub -all {\n([^\n])} $msg "\n$prefix\\1" msg
    regsub -all {\n\n} $msg "\n$prefix\n" msg
    if {$::msg::show_prefix_state} {
        set msg $prefix$msg
    } else {
        set msg $col$msg
    }   

    if {[regexp {[\n\r]$} $msg]} {
        set ::msg::show_prefix_state 1
    } else {
        set ::msg::show_prefix_state 0
    }   
    
    puts -nonewline $out $msg$::msg::c(none)
    flush $out
    if {[info exist ::log::fd]} {
        puts -nonewline $::log::fd $msg$::msg::c(none)
        flush $::log::fd
    }
}   

proc ::msg::die {msg} {
    set d [info frame -1]

    if {[dict exist $d proc]} {
        set prefix [dict get $d proc]:
    } else {
        set prefix $::opt(progname):
    }

    msg err "$prefix[dict get $d line]: $msg\n" stderr
    exit 1
}

proc ::msg::err {msg} {
    msg warn "error: $msg\n"
    flush stdout
}

proc ::msg::warn {msg} {
    msg warn "warning: $msg\n"
    flush stdout
}

proc ::msg::ok {} {
    msg pass "\r ok$::msg::esc(erase-line-to-end)\n"
}

proc ::msg::hexdump string {
    binary scan $string H* hex
    regexp -all -inline .. $hex
}

proc ::msg::hexdump_ascii {string {shift {}}} {
    for {set i 0} {$i < [string length $string]} {incr i 16} {
        set row [string range $string $i [expr {$i + 15}]]
        binary scan $row H* hex
        set hex [regsub -all {(.{2})} [format %-32s $hex] {\1 }]
        set row [regsub -all {[^[:print:]]} $row .]
        puts [format "$shift%08x: %s %-16s" $i $hex $row]
    }
}

proc ::msg::bindump string {
    binary scan $string b* bin
    regexp -all -inline .{8} $bin
}

proc ::msg::beep {} {
    after 0 {
        send_tty "\x07"
        for {set i 0} {$i < 3} {incr i} {
            sleep 1
            send_tty "\x07"
        }
    }
}

namespace import ::msg::*
############## end: message helpers ######################
proc rand {min max} {
    return [expr {int(rand() * ($max - $min + 1) + $min)}]
}

proc check_for_following {type} {
    global argv0
    if {![llength [uplevel set argv]]} {
        send_error "$argv0: [uplevel set flag] requires following $type"
        exit 2
    }
}

proc lrotate {xs {n 1}} {
    if {$n == 0 || [llength $xs] == 0 } {return $xs}
    set n [expr {$n % [llength $xs]}]
    return [concat [lrange $xs $n end] [lrange $xs 0 [expr {$n - 1}]]]
}

proc canonize_ip {ip_} {
    regexp {^((?:(?:\d{1,3}\.){3}\d{1,3})|\d{1,3}):?(\d+)?$} $ip_ -> ip port
    if {![info exist ip] || $ip == {}} {
        die "Expect \"$ip_\" as IP in formar <digit>.<digit>.<digit>.<digit> or 192.168.0.<digit>. optional port \":<digit>\""
    }
    if {$port == {}} {
        set port 9200
    }
    if {[regexp {^\d+$} $ip]} {
        set ip 192.168.0.$ip
    }
    set ::port($ip) $port
    return $ip
}

proc sec2date {sec} {
    clock format $sec -format {%d-%m-%Y %H:%M:%S}
}

proc timeunit2sec {unit} {
    regexp {^(\d+)([mhd])$} $unit -> digit suffix
    switch -regexp -- $unit {
        {\d+m} { return [expr $digit * 60] }
        {\d+h} { return [expr $digit * 60 * 60] }
        {\d+d} { return [expr $digit * 60 * 60 * 24] }
        {\d+}  { return $unit }
        {*}    { return {} }
    }
}

proc sec2human {in_sec} {
    if {$in_sec <= 60} { return "$in_sec sec" }
    set out {}
    if {[set mday [expr int($in_sec / (24 * 60 * 60))]] != 0} { lappend out "$mday day" }
    if {[set hour [expr int($in_sec / (60 * 60) % 24)]] != 0} { lappend out "$hour hour"}
    if {[set min  [expr int(($in_sec / 60) % 60)]]      != 0} { lappend out "$min min"  }
    if {[set sec  [expr int($in_sec % 60)]]             != 0} { lappend out "$sec sec"  }
    return "$in_sec sec ([join $out { }])"
}

proc human_eta_time {start duration msg_fmt} {
    return [format $msg_fmt [sec2human [expr $start + $duration - [clock seconds]]]]
}

proc ask_yes {msg} {
    set rc 1

    while 1 {
        msg ask "$msg \[Y|n]: "
        expect_user -re {^[Yy]?\n} {
            set rc 1
            break
        } -re {^[Nn]\n} {
            set rc 0
            break
        } -re {.*\n} {
        }
    }

    return $rc
}

############## end: help function ######################
namespace eval ::am {
    namespace export connect sendim flush_all
}

proc ::am::connect {ip} {
    msg note "Connect to $ip:$::port($ip)\n"
    while {[catch {spawn -open [socket $ip $::port($ip)]} err]} {
        msg warn "$ip:$::port($ip): $err. Try reconnect in 1 sec\n"
        sleep 1
    }
    fconfigure $spawn_id -translation binary
    set ::sid2ip($spawn_id) $ip:$::port($ip)
    return $spawn_id
}

proc ::am::disconnect {sid} {
    msg note "Disconnect from $::sid2ip($sid)\n"
    catch {
        exp_close -i $sid
        expect -i $sid eof
    }
    unset ::sid2ip($sid)
}

proc ::am::send {sid cmd} {
    ::log::log $::sid2ip($sid) "$cmd" 1
    msg info  "$::sid2ip($sid) => $cmd"
    exp_send -i $sid -- $cmd
}

proc ::am::send_ims {sid sendtime payload} {
    ::am::send $sid "AT*SENDIMS,[string length $payload],255,$sendtime,$payload\n"
}

proc ::am::send_sync {sid addr} {
    ::am::send $sid "AT%SYNC,$addr,10\n"
}

proc ::am::reset_all {sids} {
    foreach sid $sids {
        catch {::am::send $sid "ATZ4\n"}
        catch {::am::send $sid "AT%RESET\n"}
    }
}

proc ::am::flush_all {sids} {
    msg note "Flushing data from all modems... "
    expect -timeout 1 -i $sids -re .+ {
        msg dbg "\n$::sid2ip($expect_out(spawn_id)) flushed: $expect_out(buffer)"
        exp_continue
    } timeout
    msg note "done\n"
}

proc ::am::get_timeout_buffer {sid} {
    set out {}
    expect -timeout 1 -i $sid -re .+ {
        lappend out $expect_out(buffer)
    }
    return [join $out]
}

proc ::am::send_all {sids cmds} {
    foreach cmd-repl $cmds {
        foreach sid $sids {
            set cmd  [subst [lindex ${cmd-repl} 0]]
            set answ {(?:\[\*])?OK}

            if {[llength ${cmd-repl}] > 1} {
                set answ [lindex ${cmd-repl} 1]
            }

            #exp_internal 1
            catch {::am::send $sid "$cmd\n"}
            expect -timeout 2 -i $sid -re "^$answ\r\n" {
                if {[llength ${cmd-repl}] > 2} {
                    # create array name in [lindex ${cmd-repl} 2] with index $sid
                    set [lindex ${cmd-repl} 2]($sid) $expect_out(1,string)
                }
            } -re {ERROR NO CONTROL\r\n} {
                ::am::send $sid "AT@CTRL\n"
                expect -timeout 1 -i $sid -re {OK\r\n} {
                } timeout {
                    die "Can't get expected replay on command \"$cmd\", In buffer: [::am::get_timeout_buffer $sid]\n"
                }
                ::am::send $sid "$cmd\n"
                exp_continue
            } timeout {
                die "Can't get expected replay on command \"$cmd\", In buffer: [::am::get_timeout_buffer $sid]\n"
            } eof {
                die "Connection close\n"
            }
        }
    }
}

proc ::am::check_modems {} {
    msg note "Checking modem configuration\n"

    # mute log output
    set ll $::opt(loglevel)
    set ::opt(loglevel) {err warn}

    foreach ip $::ips {
        lappend ::sids [connect $ip]
    }
    flush_all $::sids

    ::am::send_all $::sids $::opt(check-cmds)

    # we need local version of sid2ip,
    # becouse ::am::disconnect clean it up
    array set sid2ip [array get ::sid2ip]
    foreach sid $::sids {
        ::am::disconnect $sid
    }
    set ::opt(loglevel) $ll

    foreach sid $::sids {
        msg note "$sid2ip($sid): fw: $::ver_fw($sid)\n"
        foreach s [lmap {p1 p2 p3 p4 p5} [split $::ver_evins($sid) ,] {join [list $p1 $p2 $p3 $p4 $p5]}] {
            msg note "$sid2ip($sid): evins: $s\n"
        }
        regexp {evins_proprietary:(0\.[\d+])} $::ver_evins($sid) -> ver
        if {![info exist ver] || \
            ![string is double $ver] || \
            $ver < $::opt(evins-ver-min)} {
            if {![info exist ver]} {
                set ver unknown
            }
            die "Evins version $ver, but should be not less then $::opt(evins-ver-min)\n"
        }
    }
    array unset sid2ip 
    array unset ::ver_fw
    array unset ::ver_evins
    unset ::sids
}

namespace import ::am::*
############## start: ::log ######################
namespace eval ::log {
}

proc ::log::main_init {} {
    file mkdir $::opt(log-dir)/
    set fname $::opt(log-dir)/main.log
    set ::log::fd [open $fname a]
}

proc ::log::main_log {msg} {
    puts -nonewline $::log::fd $msg
}

proc ::log::main_deinit {} {
    catch {
        ::close $::log::fd
        unset ::log::fd
    }
}

proc ::log::test_init {test timestamp ip} {
    set ::log::dir $::opt(log-dir)/$test/[clock format $timestamp -format {%d-%m-%Y_%H-%M-%S}]_$ip
    file mkdir $::log::dir
    msg note "Create $::log::dir/\n"
}

proc ::log::test_deinit {} {
    unset ::log::dir
}

proc ::log::log {ip msg {quiet 0}} {
    if {![info exist ::log::dir]} {
        return
    }
    if {!$quiet} {
        msg norm "$ip: $msg"
    }
    set fname $::log::dir/$ip.log
    set fd [open $fname a]
    puts -nonewline $fd $msg
    ::close $fd
}

############## end: ::log ######################
############## start: tests ######################
proc parse_name_tests {in} {
    set tests [split $in ,]
    foreach test $tests {
        switch -re $test {
            {all|ims|sync|pcsync} {}
            default {
                die "Unknown test name. Must be 'all' or 'ims' or 'sync' or 'pcsync'"
            }
        }
    }

    if {[llength $tests] != 1 && [lsearch -exact $tests all] != -1} {
        die "'all' can be only one test"
    }

    if {$tests == {all}} {
        set tests {ims sync pcsync}
    }

    return $tests
}

############# begin: test helpers ###################################

namespace eval ::test_helper:: {
}

proc ::test_helper::begin {} {
    uplevel 1 {
        set ts_start [clock seconds]

        set snd_ip [lindex $ips 0]
        set rcv_ip [lrange $ips 1 end]

        msg stage "test '$test' start. Duration: $duration sec"
        msg info "Transmit from: $snd_ip:$::port($snd_ip)\n"
        msg info "Recevice in:\n"
        foreach ip $rcv_ip {
            msg info "  $ip:$::port($ip)\n"
        }


        set ::sids {}
        foreach ip $ips {
            lappend ::sids [connect $ip]
        }
        set ::snd_sid  [lindex $::sids 0]
        set ::rcv_sids [lindex $::sids 1 end]

        ::log::test_init $test $ts_start $snd_ip

        flush_all [list $::snd_sid {*}$::rcv_sids]

        ::am::send_all $::sids $::opt(init-cmds)
    }
}

proc ::test_helper::finish {} {
    uplevel 1 {
        ::am::reset_all $::sids
        foreach sid $::sids {
            ::am::disconnect $sid
        }
        unset ::sids
        ::log::test_deinit
    }
}

proc ::test_helper::time_sync_reset_resend {} {
    uplevel 1 {
            if {$try_again > 0} {

                ::am::send $::snd_sid "AT%RESET\n"
                expect -timeout 2 -i $::snd_sid -re "%RESET,done\r\n"

                incr try_again -1
                msg note "will retry in 3 sec \[[expr 3 - $try_again]/3]\n"
                sleep 3
                ::am::send_sync $::snd_sid $::sid2laddr($sid)
                exp_continue
            }
    }
}
proc ::test_helper::time_sync {} {
    uplevel 1 {
        ::am::send_sync $::snd_sid $::sid2laddr($sid)

        set try_again 3
        set done 0
        set timeout 10
        expect -i $::snd_sid -re {(%SYNC,\d+,[-\d]+,.*?)\r\n} {
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            # need to collect logs in remote nodes
            set timeout 3 
            set done 1
            exp_continue
        } -re {(%SYNC,\d+,(failed|busy))\r\n} {
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            ::test_helper::time_sync_reset_resend
        } -re {OK\r\n} { exp_continue
        } -re {^([^\r\n]*)\r\n} {
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            exp_continue
        } timeout {
            msg note "Timeout. done: $done, timeout $timeout\n"
            if {!$done} {
                ::test_helper::time_sync_reset_resend
            }
        } eof {        msg warn "$::sid2ip($expect_out(spawn_id)) EOF\n"
        } -i ::rcv_sids -re {^([^\r\n]*)\r\n} {
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            exp_continue
        } timeout {
        } full_buffer { exp_continue
        } eof {         msg warn "$::sid2ip($expect_out(spawn_id)) EOF\n"
        }
    }
}

proc ::test_helper::show_eta {} {
    uplevel 1 {
        msg note [join [list \
            "Test '$test': [human_eta_time $ts_start $duration "%s left"]." \
            "Delay for a $period sec." \
            "Tests run ETA [human_eta_time $::tests_run_time_start $::tests_run_time_est "%s left"]\n" \
        ]]
    }
}

proc ::test_helper::pc_sync {} {
    uplevel 1 {
        ::test_helper::pc_check_sync

        # set the time offset
        # NOTE: not use ::am::send for speed
        set at_rto "AT!RTO[expr $off + $t_o]\n"
        msg info  "$::sid2ip($::snd_sid) => $at_rto"
        send -i $::snd_sid -- $at_rto
        expect -i $::snd_sid -re {RTO,(\d+)\r\n} {
            msg note "RTO set $expect_out(1,string) done\n"
            exp_continue
        } -re {OK\r\n} {
        }

        ::test_helper::pc_check_sync
    }
}

proc ::test_helper::pc_check_sync {} {
    uplevel 1 {
        ::am::send_all [list $::snd_sid] { {AT@ZX0} }

        set rate 19200
        set rate 10000000
        set at_rtc "AT?RTC\n"

        # local time in microseconds (before ?RTC request)
        set t1 [clock microseconds]

        # request ?RTC from the modem
        # NOTE: not use ::am::send for speed
        msg info  "$::sid2ip($::snd_sid) => $at_rtc"
        send -i $::snd_sid -- $at_rtc
        expect -i $::snd_sid -re {(\d+)\r\n} {
            set t_m $expect_out(1,string)
        }

        # local time in microseconds (after ?RTC request) 
        set t2  [clock microseconds]

        # message length (transmitted) in bytes
        set l1  [string length $at_rtc]
        # message transmission duration in microseconds
        set md1 [expr 1000000*10*$l1/$rate]

        # message length (transmitted and received) in bytes
        set l   [expr [string length $t_m] + 2]
        # message transmission duration in microseconds
        set md  [expr 1000000*10*$l/$rate]

        # round trip time
        set delta [expr ($t2 - $t1-$md) / 2]

        # request ?RTO (the time offset)
        # NOTE: not use ::am::send for speed
        msg info  "$::sid2ip($::snd_sid) => AT?RTO\n"
        send -i $::snd_sid -- "AT?RTO\n"
        expect -i $::snd_sid -re {(\d+)\r\n} {
            set t_o $expect_out(1,string)
        }

        # time offset between PC and the modem
        set off [expr $t1 + $delta + $md1 - $t_m]

        ::log::log $::sid2ip($::snd_sid) "delta: $delta, offset: $off, T1: $t1, Tm: $t_m, To: $t_o, MD: $md, L: $l)\n"
        ::am::send_all [list $::snd_sid] { {AT@ZX1} }
    }
}

############# end: test helpers ###################################
namespace eval ::test {
}

namespace eval ::test::ims {
    set descrition \
        "Send IMS every Y seconds during X hours to collect data\n\
        about mutual clock drift between a transmitter and receivers"
}

proc ::test::ims::run {duration period ips} {
    set test ims
    ::test_helper::begin

    set payload 0
    ::am::send_ims $::snd_sid {} $payload
    set rep_rate [expr $period * 1000000]

    set eta_note_cnt 5
    #exp_internal 1
    set timeout -1 
    expect -i $::snd_sid -re {(SENDEND,\d+,ims,(\d+),.*?)\r\n} {
        if {[expr [clock seconds] - $ts_start] > $duration} {
            msg stage "test stop"
        } else {
            set ts {}
            if {[info exist expect_out(2,string)]} {
                set ts $expect_out(2,string)
            }
            ::am::send_ims $::snd_sid [expr $ts + $rep_rate] $payload
            if {$eta_note_cnt <= 0} {
                set eta_note_cnt 5
                ::test_helper::show_eta 
            }
            incr eta_note_cnt -1
            exp_continue
        }
    } -re {(EXPIREDIMS.*?)\r\n} {
        if {[expr [clock seconds] - $ts_start] > $duration} {
            msg stage "test stop"
        } else {
            incr payload
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            ::am::send_ims $::snd_sid {} $payload
            exp_continue
        }
    } -re {(CANCELEDIM.*?)\r\n} {
        if {[expr [clock seconds] - $ts_start] > $duration} {
            msg stage "test stop"
        } else {
            incr payload
            ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
            ::am::send_ims $::snd_sid [expr $ts + $rep_rate] $payload
            exp_continue
        }
    } -re {OK\r\n} { exp_continue
    } -re {^([^\r\n]*)\r\n} {
        ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
        exp_continue
    } eof {
        msg warn "$::sid2ip($expect_out(spawn_id)) EOF\n"
    } -i ::rcv_sids -re {^([^\r\n]*)\r\n} {
        ::log::log $::sid2ip($expect_out(spawn_id)) "$expect_out(1,string)\n"
        exp_continue
    } timeout {     exp_continue
    } full_buffer { exp_continue
    } eof {         msg warn "$::sid2ip($expect_out(spawn_id)) EOF\n"
    }

    ::test_helper::finish
}

namespace eval ::test::sync {
    set descrition \
        "Send AT%SYNC (point to point) periodically. Log the correction\n\
        returned by AT%SYNC command."
}
proc ::test::sync::run {duration period ips} {
    set test sync
    ::test_helper::begin

    set done 0
    while {!$done} {
        foreach sid $::rcv_sids {
            ::test_helper::time_sync

            if {[expr [clock seconds] - $ts_start + $period - 3] >= $duration} {
                set done 1
                break
            }

            ::test_helper::show_eta 

            # to compensate -timeout subtract 3
            sleep [expr $period - 3]
        }
    }

    msg stage "test stop"
    ::test_helper::finish
}

namespace eval ::test::pcsync {
    set descrition \
        "Sync physical clock of main modem with PC clock and on remote modems.\n\
        Checking periodically physical clock syncing with PC in main modem"
}

proc ::test::pcsync::run {duration period ips} {
    set test pcsync
    ::test_helper::begin

    set period 60
    set done 0
    while {!$done} {
        # 1. sync.sh  PC with modem
        ::log::log $::sid2ip($::snd_sid) "Test '$test'\[1]: sync $::sid2ip($::snd_sid) physical clock with PC clock\n"
        ::test_helper::pc_sync

        ::log::log $::sid2ip($::snd_sid) "Test '$test'\[2]: sync $::sid2ip($::snd_sid) physical clock with remote modems\n"
        # step 2. AT%SYNC  1 -> {2,3,4}
        foreach sid $::rcv_sids {
            ::test_helper::time_sync
        }

        set check_cnt 5
        for {set i 0} {$i < $check_cnt} {incr i} {
            # 3. check_sync.sh 1 -> {1,2,3}
            ::log::log $::sid2ip($::snd_sid) \
                "Test '$test'\[3]: check $::sid2ip($::snd_sid) physical clock syncing with PC \[[expr $i + 1]/$check_cnt]\n"

            foreach sid $::rcv_sids {
                ::test_helper::pc_check_sync
            }

            if {[expr [clock seconds] - $ts_start + $period] >= $duration} {
                set done 1
                break
            }

            # 4. sleep 1m
            if {$i < [expr $check_cnt - 1]} {
                ::test_helper::show_eta
                sleep $period
            }

            # 5. goto 3 for 5 times
        }
    }


    msg stage "test stop"
    ::test_helper::finish
}

############## end: tests ######################

proc usage {{err {}}} {
    global argv0
    send_user "Scenario test framework for EvoLogics S2C acoustic modems.\n\n\
    Usage: $::opt(progname) \[flags] \[--] <test-names> <IP\[:port]>...\n\
    \n\
    -p  - period of sending IMS/%SYNC (default:\
        [join [lmap k [array name ::test_period] {set k "'$k': [sec2human $::test_period($k)]"}] {, }])\n\
    -d  - test duration time (default: [sec2human $::opt(test-duration)]). Possible add suffix 'm' and 'h' for minutes and hours\n\
    -l  - number of tests running in loop\n\
    -y  - answer 'yes' to all questions\n\
    \n\
    -h  - this help\n\
    -v  - verbose log\n\
    \n\
    IP\[:port]    - Modem IP and optional port. Can be in short NUM in 192.168.0.<NUM>\n\
    test-names   - Can be 'all' or comma separated test names.\n               \
    Available tests: [lmap ns [namespace children ::test *] {namespace tail $ns}]\n\
    \n\
    "
    send_user "\n"
    foreach ns [namespace children ::test *] {
        send_user "Test '[namespace tail $ns]' descrition:\n [set ${ns}::descrition]\n\n"
    }

    send_user "Usage examples:\n\
    \n\
    # Run all test with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Modem 192.168.0.171:9200 will act as main modem.\n\
    $ ./$::opt(progname) all 171 162\n\
    \n\
    # Run all test with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Tests will be repeat 1 time for each modem as master, 2 times in total.\n\
    $ ./$::opt(progname) -l 1 all 171 162\n\
    \n\
    # Run tests 'ims' and 'sync' with modems 192.168.0.171:9200 and 192.168.0.162:9200 \n\
    # Tests will be repeat 2 time for each modem as master, 4 times in total.\n\
    # All interactive menu will be skipped.\n\
    $ ./$::opt(progname) -y -l 2 ims,sync 171 162\n\
    \n\
    # Run tests 'ims' for 30 min with master modems 192.168.0.171:9200 and remote 192.168.0.162:9200 \n\
    # All interactive menu will be skipped.\n\
    $ ./$::opt(progname) -y ims -d 30m 171 162\n\
    \n"

    if {$err != {}} {
        die $err
    }
    exit 0
}

while {[llength $argv] > 0} {
    set flag [lindex $argv 0]
    if {0 == [regexp "^-" $flag]} break
    set argv [lrange $argv 1 end]
    switch -- $flag {
        -s {
            set ::opt(source-level) [lindex $argv 0]
            check_for_following digit
            if {![string is digit $::opt(source-level)] || \
                $::opt(source-level) < 0 || $::opt(source-level) > 3} {
                die "Source level must be digit from 0 to 3\n"
            }
            set argv [lrange $argv 1 end]
        }
        -p {
            set ::opt(send-period) [lindex $argv 0]
            check_for_following sec
            if {![string is digit $::opt(send-period)]} {
                die "Send period must be digit\n"
            }
            set argv [lrange $argv 1 end]
        }
        -d {
            set ::opt(test-duration) [timeunit2sec [lindex $argv 0]]
            check_for_following sec
            if {![string is digit $::opt(test-duration)]} {
                die "wrong test duration time format"
            }
            set argv [lrange $argv 1 end]
        }
        -l {
            set ::opt(loop-mode) [lindex $argv 0]
            check_for_following number
            if {![string is digit $::opt(loop-mode)]} {
                die "wrong number of tests running in loop"
            }
            set argv [lrange $argv 1 end]
        }
        -y { set ::opt(not-interactive) 1 }
        -v { lappend ::opt(loglevel) dbg }
        -h - --help { usage }
        -- { break }
        ^- { die "unknown option: \"$flag\"" }
    }
}

set argv [string trim $argv \{\}]
set argc [llength $argv]

if {$argc < 3} {
    usage
}

set tests [parse_name_tests [lindex $argv 0]]
set ::ips {}
foreach ip [lrange $argv 1 end] {
    set ip [canonize_ip $ip]
    lappend ::ips $ip
}

trap {
    if {[info exist ::sids]} {
        msg warn "\rInterrupt test\n"
        ::am::reset_all $::sids
    }
    ::log::main_deinit
    exit
} SIGINT

::log::main_init

msg info "Will be perform test with nodes:\n"
foreach ip $::ips {
    msg info $ip:$port($ip)\n
}
if {$::opt(loop-mode)} {
    msg note "NOTE: Every test will repeat for each node becoming master\n"
}
set sep "+--------+-----------+----------+----------+\n"
msg info $sep
msg info "|  Test  |  Duration |  Period  |  Repeat  |\n"
msg info $sep

set ::tests_run_time_start [clock second]
set ::tests_run_time_est 0
foreach test $tests {
    if {$::opt(send-period) != -1} {
        set period $::opt(send-period)
    } else {
        set period $::test_period($test)
    }

    set repeat $::opt(loop-mode)
    if {$::opt(loop-mode)} {
        set repeat [expr $::opt(loop-mode) * [llength $::ips]]
    } else {
        set repeat 1
    }

    msg info [format "| %-6s | %5s sec | %4s sec | %2s times | \n" \
        $test $::opt(test-duration) $period $repeat]
    set ::tests_run_time_est [expr $::tests_run_time_est + $::opt(test-duration) * $repeat] 
}
msg info $sep
msg info "Estimated time of running test is: [sec2human $::tests_run_time_est], "
msg info "ETA [sec2date [expr [clock second] + $::tests_run_time_est]]\n"

::am::check_modems

if {!$::opt(not-interactive) && ![ask_yes {Do you want run tests?}]} {
    exit
}

foreach test $tests {
    if {$::opt(send-period) != -1} {
        set period $::opt(send-period)
    } else {
        set period $::test_period($test)
    }

    ::test::${test}::run $::opt(test-duration) $period $::ips

    set repeat $::opt(loop-mode)
    if {$::opt(loop-mode)} {
        set repeat [expr $::opt(loop-mode) * [llength $::ips] - 1]
    }

    for {} {$repeat} {incr repeat -1} {
        sleep 2
        set ::ips [lrotate $::ips]
        ::test::${test}::run $::opt(test-duration) $period $::ips
    }
}
